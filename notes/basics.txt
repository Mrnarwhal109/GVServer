/*
------------------------TYPES
*/

// unsigned int 8 bit
u8

// 32 bit (standard float) float
f32


/*
------------------------LOOPS
*/


// Range from 30 to 50
let numbers = 30..51;

// The second thing in a for loop (after "in") is an iterator

for i in 1..11 { // includes 1, does not include 11, is 1-10 inclusive range
    println!("The number is {}", i);
}

let numbers = 30..51;
for i in numbers {
    println!("The number is {}", i);
}

// Make vector
let animals = vec!["Rabbit", "Dog", "Cat"];

for a in animals.iter() {
    println!("The animal name is {}", a);
}

// Ownership for animals goes to
for a in animals {
    println!("The animal name is {}", a);
}
// Because of ownership, animals cannot be accessed down here

// Tuple for index and value
for (index, a) in animals.iter().enumerate() {
    println!("The index is {} and the animal name is {}", index, a);
}


/*
------------------------ENUMS
*/


enum Direction {
    Up,
    Down,
    Left,
    Right
}

let player_direction:Direction = Direction::Up;

// switch statement equivalent
match player_direction {
    Direction::Up => println!("We are heading up!"),
    Direction::Down => println!("We are heading down!"),
    Direction::Left => println!("We are heading left!"),
    Direction::Right => println!("We are heading right!"),
}


/*
------------------------CONSTANTS
*/


// Must specify data type
const MAXIMUM_NUMBER: u8 = 20;

// Could use it in a loop range
for n in 1..MAXIMUM_NUMBER {
    println!("{}, n");
}

// Illegal
MAXIMUM_NUMBER = 30;


/*
------------------------TUPLES
*/


let tup1 = (20, 25, 30, 35);

// Prints 30 (at index 2)
println!("{}", tup1.2);

// You can get voodoo with multiple types
let tup_different_types = (20, "Rust", 3.4, false);

// Now prints false
println!("{}", tup1.3);

// You can get hoodoo with nesting
let tup_different_types = (20, "Rust", 3.4, false, (1, 4, 7));

// Wrap in parens, prints 7
println!("{}", (tup1.4).2);

let tup_aneurysm = (45, 6.7, "Computer");
let (a, b, c) = tup_aneurysm;

// Prints a is 45, b is 6.7, c is Computer
println!("a is {}", a);
println!("b is {}", b);
println!("c is {}", c);


/*
------------------------FUNCTIONS
*/

fn main() {
    print_numbers_to(10);

    if is_even(30) {
        println!("It is even");
    }
}

// Argument name num, type 32-bit int
fn print_numbers_to(num: u32) {
    for n in 1..num {
        if is_even(n) {
           println!("{}", n);
        }
        else {
            println!("{}" is odd", n);
        }
    }
}

// => return type
fn is_even(num: u32) => bool {
    return num % 2 == 0;
}

// functions return the last line, note the lack of a semicolon
fn is_even(num: u32) => bool {
    num % 2 == 0
}


fn main() {
    let blue = Color { red: 0, green: 0, blue: 255 };

    // Pass by ref
    print_color(&blue);

    // Assume print_color asked for a Color and not a &Color
    print_color(blue);
    // This not allowed because the value of blue has moved and it is no longer in this scope.
    print_color(blue);
}


// Reference to a Color
fn print_color(c: &Color) {
    println!("Color - R:{} G:{} B:{}", c.red, c.green, c.blue);
}

/*
------------------------CODE BLOCKS
*/

fn main() {
    let x = 10;

    {
        // isolated
        let y = 5;

        // Prints x = 10, y = 5
        println!("x = {}, y = {}", x, y);
    } // y go byebye

    // Can't find y
    println!("x = {}, y = {}", x, y);
}

/*
------------------------SHADOWING
*/

fn main() {
    let mut x = 10;

    {
        x = 15;
    }

    // Prints x is 15
    println!("x is {}", x);
}

fn main() {
    let mut x = 10;

    {
        let x = 15;
    }

    // Prints x is 10
    println!("x is {}", x);
}

fn main() {
    let mut x = 10;

    {
        let x = 15;
    }

    let x = "X is a string";
    println!("x is {}", x);

    let x = true;
    println!("x is {}", x);
}

/*
------------------------REFERENCES
*/

fn main() {
    let mut x = 10;

    // Reference to x
    let xr = &x;

    // Reference to x
    let xr_again = &x;

    // Prints x is 10
    println!("x is {}", xr);

    // Prints x is 10
    println!("x is {}", x);

    // Prints x is 10
    println!("x is {}", xr_again);

    // Does not work
    xr_again += 1;

    // Mutable reference, x can now be changed through it
    let xr_again_again = &mut x;

    // Dereference
    *xr_again_again += 1;
    // x is now 11

    // Does not work
    // x is borrowed as mutable already and cannot be borrowed as immutable
    println!("x is {}", x);

    // It would have worked if it was put in a code block like this and then printed afterwards
    {
        let xr_again_again = &mut x;
        *xr_again_again += 1;
    }

    // From docs
    // First, any borrow must last for a scope no greater than that of the owner.
    // Second, you may have one or the other of these two kinds of borrows, but not both at the same time:
    //      * one or more references (&T) to a resource,
    //      * exactly one mutable reference (&mut T).

    // "There is a 'data race' when two or more pointers access the same memory location at the same time,
    // where at least one of them is writing, and the operations are not synchronized."
}

/*
------------------------STRUCTS
*/

struct Color {
    red: u8, // u8: 0-255
    green: u8,
    blue: u8
}

fn main() {
    let mut bg = Color { red: 255, green: 70, blue: 15 };

    println!("{}, {}, {}", bg.red, bg.green, bg.blue);

    // Allowed if bg was made with let mut
    bg.blue = 45;
}

// Tuple struct
struct Color(u8, u8, u8);

fn main() {
    let mut red = Color(255, 0, 0);

    // Changing index 2
    red.2 = 60;

    // Prints red is 255, 0, 60
    println!("red is {}, {}, {}", red.0, red.1, red.2);
}


