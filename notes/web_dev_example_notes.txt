// t0do, macro I think
async fn health_check(req: HttpRequest) -> impl Responder {
    t0do!()
}

// t0do, macro I think
async fn health_check(req: HttpRequest) -> impl Responder {
    t0do!()
}
            .route("/", web::get().to(greet)) // Request passed to handler only if its HTTP method is GET
            .route("/{name}", web::get().to(greet))


Explicit type declaration
    let port: u16 = listener.local_addr().unwrap().port();

    noteworthy url format application/x-www-form-urlencoded
    key value pairs encoded in &key=value&key=value

    space becomes %20 and @ becomes @40, likely due to ASCII hex





       let configuration = get_configuration().expect("Failed to read configuration");
       let connection_string = configuration.database.connection_string();
       // The 'Connection' trait MUST be in scope for us to invoke
       // 'PgConnection::connect' - it is not an inherent method of the struct!
       // The connection must be marked as mutable
       let mut db_pool = PgPool::connect(&connection_string)
           .await
           .expect("Failed to connect to Postgres.");