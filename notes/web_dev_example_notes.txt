// t0do, macro I think
async fn health_check(req: HttpRequest) -> impl Responder {
    t0do!()
}

// t0do, macro I think
async fn health_check(req: HttpRequest) -> impl Responder {
    t0do!()
}
            .route("/", web::get().to(greet)) // Request passed to handler only if its HTTP method is GET
            .route("/{name}", web::get().to(greet))


Explicit type declaration
    let port: u16 = listener.local_addr().unwrap().port();

    noteworthy url format application/x-www-form-urlencoded
    key value pairs encoded in &key=value&key=value

    space becomes %20 and @ becomes @40, likely due to ASCII hex





       let configuration = get_configuration().expect("Failed to read configuration");
       let connection_string = configuration.database.connection_string();
       // The 'Connection' trait MUST be in scope for us to invoke
       // 'PgConnection::connect' - it is not an inherent method of the struct!
       // The connection must be marked as mutable
       let mut db_pool = PgPool::connect(&connection_string)
           .await
           .expect("Failed to connect to Postgres.");





    // Using 'enter' in an async function is a recipe for disaster!
    // Bear with me for now, but don't do this at home.
    // See the following section on 'Instrumenting Futures'
    let _request_span_guard = request_span.enter();




    // Launch with tracing
    cargo run RUST_LOG=trace




















        // Let's generate a random unique identifier
        let request_id = Uuid::new_v4();
        // The % operator here tells tracing to use their display for logging
        let request_span = tracing::info_span!(
            "request_id {} - Adding '{}' '{}' as a new subscriber.",
            %request_id,
            subscriber_email = %form.email,
            subscriber_name = %form.name
        );
        // Using 'enter' in an async function is a recipe for disaster!
        // Bear with me for now, but don't do this at home.
        // See the following section on 'Instrumenting Futures'
        let _request_span_guard = request_span.enter();

        // The request span guard is dropped at the end of 'subscribe'
        // That's when we "exit" the span














            // 'Result' has two variants: 'Ok' and 'Err'.
            // The first for successes, the second for failures.
            // We use a 'match' statement to choose what to do based
            // on the outcome.
            // We will talk more about 'Result' going forward!