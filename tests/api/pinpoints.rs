use serde::Serialize;
use uuid::serde::compact::serialize;
use gvserver::domain::Pinpoint;
use crate::helpers::{spawn_app};

#[tokio::test]
async fn get_all_pinpoints_allowed_with_custom_credentials() {
    let app = spawn_app().await;

    let jwt = app.create_jwt("TESTUSER").await;
    let pinpoint = Pinpoint::new(
        100 as f64, 100 as f64, String::from("PINPOINT DESCRIPTION"),
        String::from("TESTUSER"));

    // Move to post later
    let json_body = serde_json::json!({
        "latitude": "100.64",
        "longitude": "200.78",
        "description": "GENERATED BY UNIT TESTING",
        "username": "TESTUSER",
    }).to_string();

    let response = app.get_pinpoints(json_body, jwt).await;

    // Assert
    assert_eq!(response.status(), 200);
}

#[tokio::test]
async fn get_all_pinpoints_fails_with_invalid_jwts() {
    let app = spawn_app().await;
    let jwt = String::from("yyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWI\
    iOiJURVNUVVNFUiIsImV4cCI6MTY5NDQ3MTY1OH0.CvMGrTd1IwWGTowzDrPdjnFZC5pF9a1oLBBlthOgIx8");
    let jwt = jwt.replace(' ', "").trim().to_string();
    println!("Formatted jwt: {}", &jwt);
    let pinpoint = Pinpoint::new(
        100 as f64, 100 as f64, String::from("PINPOINT DESCRIPTION"),
        String::from("TESTUSER"));
    let json_body = serde_json::json!({
        "latitude": "100.64",
        "longitude": "200.78",
        "description": "GENERATED BY UNIT TESTING",
        "username": "TESTUSER",
    }).to_string();

    let response = app.get_pinpoints(json_body, jwt).await;

    assert_eq!(response.status(), 401);
}
