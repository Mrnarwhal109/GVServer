use gvserver::authentication::AuthParameters;
use gvserver::routes::login::post::LoginData;
use gvserver::routes::signup::post::UserSignUp;
use crate::helpers::{spawn_app};

#[tokio::test]
async fn get_all_pinpoints_allowed_with_custom_credentials() {
    let app = spawn_app().await;

    let jwt = app.create_jwt("TESTUSER").await;
    /*
    let pinpoint = Pinpoint::new(
        100 as f64, 100 as f64, String::from("PINPOINT DESCRIPTION"),
        String::from("TESTUSER"));

    // Move to post later
    let json_body = serde_json::json!({
        "latitude": "100.64",
        "longitude": "200.78",
        "description": "GENERATED BY UNIT TESTING",
        "username": "TESTUSER",
    }).to_string();


        let pinpoint = Pinpoint::new(
        100 as f64, 100 as f64, String::from("PINPOINT DESCRIPTION"),
        String::from("TESTUSER"));
    let json_body = serde_json::json!({
        "latitude": "100.64",
        "longitude": "200.78",
        "description": "GENERATED BY UNIT TESTING",
        "username": "TESTUSER",
    }).to_string();
     */

    let response = app.get_pinpoints(jwt).await;

    // Assert
    assert_eq!(response.status(), 200);
}

#[tokio::test]
async fn get_all_pinpoints_fails_with_invalid_jwts() {
    let app = spawn_app().await;
    let jwt = String::from("yyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWI\
    iOiJURVNUVVNFUiIsImV4cCI6MTY5NDQ3MTY1OH0.CvMGrTd1IwWGTowzDrPdjnFZC5pF9a1oLBBlthOgIx8");
    let jwt = jwt.replace(' ', "").trim().to_string();
    println!("Formatted jwt: {}", &jwt);

    let response = app.get_pinpoints(jwt).await;

    assert_eq!(response.status(), 401);
}

#[tokio::test]
pub async fn get_all_pinpoints_allowed_with_new_user_jwt() {
    let app = spawn_app().await;
    let username = String::from("MentallyAbsurd");
    let sign_up_data = UserSignUp {
        email: String::from("mentallyabsurd@gmail.com"),
        username: username.clone(),
        pw: String::from("$uper$ecurePa$$word!")
    };

    let json_data = serde_json::to_string(&sign_up_data)
        .expect("Failed to serialize struct.");

    let response = app.post_signup(json_data, sign_up_data.username, sign_up_data.pw).await;
    assert_eq!(response.status(), 200);

    let login_data = LoginData {
        username,
        pw: String::from("$uper$ecurePa$$word!")
    };

   serde_json::to_string(&login_data)
        .expect("Failed to serialize struct.");

    let response = app.post_login(
        login_data.username, login_data.pw).await;

    let code = response.status().as_u16();

    let json_return = response.json::<AuthParameters>().await
        .expect("Failed to get a JSON response back.");

    println!("JWT response received: {}", json_return.jwt);

    assert_eq!(code, 200);

    let response = app.get_pinpoints(json_return.jwt).await;
    assert_eq!(response.status(), 200);
}

#[tokio::test]
pub async fn get_all_pinpoints_not_allowed_with_new_user_faulty_jwt() {
    let app = spawn_app().await;
    let username = String::from("MentallyAbsurd");
    let sign_up_data = UserSignUp {
        email: String::from("mentallyabsurd@gmail.com"),
        username: username.clone(),
        pw: String::from("$uper$ecurePa$$word!")
    };

    let json_data = serde_json::to_string(&sign_up_data)
        .expect("Failed to serialize struct.");

    let response = app.post_signup(json_data, sign_up_data.username, sign_up_data.pw).await;
    assert_eq!(response.status(), 200);

    let login_data = LoginData {
        username,
        pw: String::from("$uper$ecurePa$$word!")
    };

    serde_json::to_string(&login_data)
        .expect("Failed to serialize struct.");

    let response = app.post_login(
        login_data.username, login_data.pw).await;

    let code = response.status().as_u16();

    let json_return = response.json::<AuthParameters>().await
        .expect("Failed to get a JSON response back.");

    println!("JWT response received: {}", json_return.jwt);

    assert_eq!(code, 200);

    let mut evil_jwt = json_return.jwt.clone();
    evil_jwt.pop();
    evil_jwt.pop();
    evil_jwt.pop();
    evil_jwt.pop();
    evil_jwt.push('E');
    evil_jwt.push('V');
    evil_jwt.push('I');
    evil_jwt.push('L');

    let response = app.get_pinpoints(json_return.jwt).await;
    assert_eq!(response.status(), 200);

    let response = app.get_pinpoints(evil_jwt).await;
    assert_eq!(response.status(), 401);
}